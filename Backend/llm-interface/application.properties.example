quarkus.langchain4j.huggingface.api-key=hf_...
quarkus.langchain4j.log-requests=true
quarkus.langchain4j.log-responses=true


--- For OpenAI models --------------------------------

quarkus.langchain4j.openai.api-key=${OPENAI_API_KEY}

quarkus.langchain4j.openai.chat-model.model-name=gpt-4o
quarkus.langchain4j.openai.chat-model.log-requests=true
quarkus.langchain4j.openai.chat-model.log-responses=true

quarkus.langchain4j.openai.chat-model.temperature=1.0
quarkus.langchain4j.openai.chat-model.max-tokens=1000
quarkus.langchain4j.openai.chat-model.frequency-penalty=0

--- For HuggingFace models ------------------------------

quarkus.langchain4j.huggingface.api-key=${HUGGINGFACE_API_KEY}

quarkus.langchain4j.huggingface.chat-model.model-name=
quarkus.langchain4j.huggingface.chat-model.log-requests=true
quarkus.langchain4j.huggingface.chat-model.log-responses=true

quarkus.langchain4j.huggingface.chat-model.temperature=1.0
quarkus.langchain4j.huggingface.chat-model.max-tokens=1000
quarkus.langchain4j.huggingface.chat-model.frequency-penalty=0

---- For EasyRag ----------------------------------------------------

quarkus.langchain4j.easy-rag.path=src/main/resources/rag #standard directory folder (documentation)
quarkus.langchain4j.easy-rag.max-segment-size=100
quarkus.langchain4j.easy-rag.max-overlap-size=25
quarkus.langchain4j.easy-rag.max-results=3

-- For using own Rag embedding model -------------------------------------

quarkus.langchain4j.embedding-model.provider=dev.langchain4j.model.embedding.onnx.bgesmallenq.BgeSmallEnQuantizedEmbeddingModel #for using the 'bge-small-en-q'


--- For PostgreSQL pgVector store relational database ----------------------

quarkus.langchain4j.pgvector.dimension=384

rag.location=src/main/resources/rag #custom property, mirroring 'quarkus.langchain4j.easy-rag.path'